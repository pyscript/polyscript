{"version":3,"file":"toml-CkEFU7ly.js","sources":["../esm/3rd-party/toml.js"],"sourcesContent":["/* c8 ignore start */\n/*! (c) Andrea Giammarchi - ISC */\n\nconst {isArray} = Array;\nconst {parse: jsonParse} = JSON;\n\n/** @typedef {{s: string[], d: Date[]}} Foreign foreign strings and dates */\n\n/**\n * Transform quoted keys into regular keys.\n * @param {string} str the key to eventually normalize\n * @param {Foreign} foreign foreign strings and dates\n * @returns \n */\nconst getKey = (str, {s}) => str.replace(/\"s(\\d+)\"/g, (_, $1) => s[$1]);\n\n/**\n * Given a `'string'` or a `\"string\"` returns a JSON compatible string.\n * @param {string} str a TOML entry to parse\n * @param {Foreign} foreign foreign strings and dates\n * @returns {string}\n */\nconst getValue = (str, foreign) => jsonParse(\n  str.replace(/(\\S+?)\\s*=/g, '\"$1\":'),\n  (_, value) => typeof value === 'string' ?\n    foreign[value[0]][value.slice(1)] :\n    value\n);\n\n/**\n * Crawl the `json` object via the given array of keys and handle array entries.\n * @param {string[]} keys a path with all keys to reach the entry\n * @param {Foreign} foreign foreign strings and dates\n * @param {object} entry the root entry of the TOML\n * @param {boolean} asArray handle array entries\n * @returns {object} the current entry to handle\n */\nconst getPath = (keys, foreign, entry, asArray) => {\n  for (let i = 0, {length} = keys, last = length - 1; i < length; i++) {\n    const key = getKey(keys[i], foreign);\n    entry = entry[key] || (entry[key] = (asArray && (i === last) ? [] : {}));\n    if (isArray(entry)) {\n      if ((i === last) || !entry.length)\n        entry.push({});\n      entry = entry.at(-1);\n    }\n  }\n  return entry;\n};\n\n/**\n * Given a TOML text, removes stirngs and dates for easier parsing +\n * remove multi-line arrays to not need evaluation.\n * @param {string} toml the TOML text to map\n * @param {string[]} strings mapped strings\n * @param {Date[]} dates mapped Dates\n * @returns {[string, Foreign]}\n */\nconst mapForeign = (toml, strings, dates) => [\n  toml\n    // map strings in the TOML\n    .replace(\n      /([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g,\n      value => `\"s${strings.push(value.slice(1, -1)) - 1}\"`\n    )\n    // map dates in the TOML\n    .replace(\n      /\\d{2,}([:-]\\d{2}){2}([ T:-][\\dZ:-]+)?/g,\n      value => `\"d${dates.push(new Date(value)) - 1}\"`\n    )\n    // avoid multi-line array entries\n    .replace(/,\\s*[\\r\\n]+/g, ', ')\n    .replace(/\\[\\s*[\\r\\n]+/g, '[')\n    .replace(/[\\r\\n]+\\s*]/g, ']'),\n  {s: strings, d: dates}\n];\n\n/**\n * Given a simple subset of a TOML file, returns its JS equivalent.\n * @param {string} toml the TOML text to parse\n * @returns {object} the TOML equivalent as JSON serializable\n */\nconst parse = toml => {\n  const [text, foreign] = mapForeign(toml, [], []);\n  const json = {};\n  let entry = json;\n  for (let line of text.split(/[\\r\\n]+/)) {\n    if ((line = line.trim()) && !line.startsWith('#')) {\n      if (/^(\\[+)(.*?)\\]+/.test(line))\n        entry = getPath(RegExp.$2.trim().split('.'), foreign, json, RegExp.$1 !== '[');\n      else if (/^(\\S+?)\\s*=([^#]+)/.test(line)) {\n        const {$1: key, $2: value} = RegExp;\n        entry[getKey(key, foreign)] = getValue(value.trim(), foreign);\n      }\n    }\n  }\n  return json;\n};\n\nexport { parse };\n\n/* c8 ignore stop */\n"],"names":[],"mappings":"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"}